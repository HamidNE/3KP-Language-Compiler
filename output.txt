integer  > Type 
ID  > IDDim 
ID  > IDDim 
ID  > IDDim 
IDDim '['IntNumber']'  > IDDim 
IDDim '['IntNumber']'  > IDDim 
ID  > IDDim 
IDDim '['IntNumber']'  > IDDim 
IDDim  > IDDList 
IDDim  IDDList   > IDDList 
IDDim  IDDList   > IDDList 
IDDim  IDDList   > IDDList 
reduced FROM Type IDDList TO VarDec 
VarDec > VarDecs 
VarDecs > Dec 
integer  > Type 
integer  > Type 
ID  > IDList 
Arg > Type IDList  
ArgList > Arg 
ArgList > ArgsList 
open brace
integer  > Type 
ID  > IDDim 
ID  > IDDim 
IDDim  > IDDList 
IDDim  IDDList   > IDDList 
reduced FROM Type IDDList TO VarDec 
VarDec > VarDecs 
VarDecs > Stmt  
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
IntNumber > Exp 
lvalue '=' Exp > Exp 
Exp > Stmt  
Exp > IDD 
IDD > lvalue 
IntNumber > Exp 
to_t  > valfor  
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
open brace
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
lvalue > Exp 
Qequal_t > Logic 
IntNumber > Exp 
and_t > Logic 
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
lvalue > Exp 
Qequal_t > Logic 
IntNumber > Exp 
Exp Logic Exp > Exp 
Exp Logic Exp > Exp 
Exp Logic Exp > Exp 
'('Exp')' > Exp 
open brace
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
Exp > ExpPlus 
ExpPlus > ExpList 
ID'('ExpList')'  > Exp 
Exp > Stmt  
 > SList  
Stmt ';' SList > SList  
close brace
'{' SList '} > Block 
if_t Exp then_t Block > Stmt  
 > SList  
Stmt ';' SList > SList  
close brace
'{' SList '} > Block 
for_t lvalue '=' Exp '('valfor')' Exp do_t Block > Stmt  
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
lvalue > Exp 
return_t Exp > Stmt  
 > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
close brace
Type ID '(' ArgsList ')' '{' SList '}' ';' > FuncDec 
No > FuncDecs 
FuncDec And FuncDecs > FuncDecs 
FuncDecs > Dec 
No > DecList 
Dec And DecList > DecList 
Dec And DecList > DecList 
open brace
integer  > Type 
ID  > IDDim 
ID  > IDDim 
ID  > IDDim 
ID  > IDDim 
ID  > IDDim 
IDDim  > IDDList 
IDDim  IDDList   > IDDList 
IDDim  IDDList   > IDDList 
IDDim  IDDList   > IDDList 
IDDim  IDDList   > IDDList 
reduced FROM Type IDDList TO VarDec 
VarDec > VarDecs 
VarDecs > Stmt  
Exp > IDD 
IDD > lvalue 
IntNumber > Exp 
lvalue '=' Exp > Exp 
Exp > Stmt  
Exp > IDD 
IDD > lvalue 
read_t '(' lvalue ')' > Stmt  
Exp > IDD 
IDD > lvalue 
IntNumber > Exp 
to_t  > valfor  
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
open brace
Exp > IDD 
IDD > lvalue 
IntNumber > Exp 
to_t  > valfor  
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
sub_t > Aop 
IntNumber > Exp 
Exp Aop Exp > Exp 
open brace
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
read_t '(' lvalue ')' > Stmt  
 > SList  
Stmt ';' SList > SList  
close brace
'{' SList '} > Block 
for_t lvalue '=' Exp '('valfor')' Exp do_t Block > Stmt  
 > SList  
Stmt ';' SList > SList  
close brace
'{' SList '} > Block 
for_t lvalue '=' Exp '('valfor')' Exp do_t Block > Stmt  
Exp > IDD 
IDD > lvalue 
IntNumber > Exp 
to_t  > valfor  
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
open brace
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
IntNumber > Exp 
lvalue '=' Exp > Exp 
Exp > Stmt  
 > SList  
Stmt ';' SList > SList  
close brace
'{' SList '} > Block 
for_t lvalue '=' Exp '('valfor')' Exp do_t Block > Stmt  
Exp > IDD 
IDD > lvalue 
IntNumber > Exp 
to_t  > valfor  
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
open brace
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
lvalue > Exp 
Qequal_t > Logic 
IntNumber > Exp 
Exp Logic Exp > Exp 
'('Exp')' > Exp 
open brace
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
Exp > ExpPlus 
ExpPlus > ExpList 
ID'('ExpList')'  > Exp 
Exp > Stmt  
Exp > IDD 
IDD > lvalue 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
add_t > Aop 
IntNumber > Exp 
Exp Aop Exp > Exp 
lvalue '=' Exp > Exp 
Exp > Stmt  
 > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
close brace
'{' SList '} > Block 
if_t Exp then_t Block > Stmt  
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
'('Exp')' > Exp 
print_t Exp > Stmt  
 > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
close brace
'{' SList '} > Block 
for_t lvalue '=' Exp '('valfor')' Exp do_t Block > Stmt  
 > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
close brace
program ID > program 
