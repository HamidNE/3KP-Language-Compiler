--||-- lineNumber : 2
--||-- lineNumber : 3
 -- create new var #n# with type 1
ID  > IDDim 
 -- create new var #m# with type 1
ID  > IDDim 
 -- create new var #mat# with type 1
ID  > IDDim 
IDDim '['IntNumber']'  > IDDim 
IDDim '['IntNumber']'  > IDDim 
 -- create new var #mark# with type 1
ID  > IDDim 
IDDim '['IntNumber']'  > IDDim 
IDDim  > IDDList 
IDDim  IDDList   > IDDList 
IDDim  IDDList   > IDDList 
IDDim  IDDList   > IDDList 
Type IDDList > VarDec 
VarDec > VarDecs 
VarDecs > Dec 
--||-- lineNumber : 4
--||-- lineNumber : 5
ID  > IDList 
Arg > Type IDList  
ArgList > Arg 
ArgList > ArgsList 
--Debugging:add_function called 
-- open brace
--||-- lineNumber : 6
--||-- lineNumber : 7
 -- create new var #i# with type 1
ID  > IDDim 
 -- create new var #j# with type 1
ID  > IDDim 
IDDim  > IDDList 
IDDim  IDDList   > IDDList 
Type IDDList > VarDec 
VarDec > VarDecs 
VarDecs > Stmt  
--||-- lineNumber : 8
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
&&& 		IntNumber > Exp 
lvalue '=' Exp > Exp 
Exp > Stmt  
--||-- lineNumber : 9
--||-- lineNumber : 10
Exp > IDD 
IDD > lvalue 
&&& 		IntNumber > Exp 
TO  > valfor  
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
-- open brace
--||-- lineNumber : 11
--||-- lineNumber : 12
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
lvalue > Exp 
EQUAL > Logic 
&&& 		IntNumber > Exp 
AND > Logic 
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
lvalue > Exp 
EQUAL > Logic 
&&& 		IntNumber > Exp 
Exp Logic Exp > Exp 
Exp Logic Exp > Exp 
Exp Logic Exp > Exp 
'('Exp')' > Exp 
-- open brace
--||-- lineNumber : 13
--||-- lineNumber : 14
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
Exp > ExpPlus 
ExpPlus > ExpList 
ID'('ExpList')'  > Exp 
Exp > Stmt  
--||-- lineNumber : 15
--||-- lineNumber : 16
 > SList  
Stmt ';' SList > SList  
-- close brace
'{' SList '} > Block 
IF Exp THEN Block > Stmt  
--||-- lineNumber : 17
--||-- lineNumber : 18
 > SList  
Stmt ';' SList > SList  
-- close brace
'{' SList '} > Block 
FOR lvalue '=' Exp '('valfor')' Exp DO Block > Stmt  
--||-- lineNumber : 19
--||-- lineNumber : 20
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
lvalue > Exp 
RETURN Exp > Stmt  
--||-- lineNumber : 21
--||-- lineNumber : 22
 > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
-- close brace
Type ID '(' ArgsList ')' '{' SList '}' ';' > FuncDec 
--||-- lineNumber : 23
--||-- lineNumber : 24
No > FuncDecs 
FuncDec And FuncDecs > FuncDecs 
FuncDecs > Dec 
No > DecList 
Dec And DecList > DecList 
Dec And DecList > DecList 
-- open brace
--||-- lineNumber : 25
 -- Syntax Error : #n# is an already declared variable
ID  > IDDim 
 -- Syntax Error : #m# is an already declared variable
ID  > IDDim 
 -- Syntax Error : #i# is an already declared variable
ID  > IDDim 
 -- Syntax Error : #j# is an already declared variable
ID  > IDDim 
 -- create new var #c# with type 1
ID  > IDDim 
IDDim  > IDDList 
IDDim  IDDList   > IDDList 
IDDim  IDDList   > IDDList 
IDDim  IDDList   > IDDList 
IDDim  IDDList   > IDDList 
Type IDDList > VarDec 
VarDec > VarDecs 
VarDecs > Stmt  
--||-- lineNumber : 26
--||-- lineNumber : 27
Exp > IDD 
IDD > lvalue 
&&& 		IntNumber > Exp 
lvalue '=' Exp > Exp 
Exp > Stmt  
--||-- lineNumber : 28
--||-- lineNumber : 29
Exp > IDD 
IDD > lvalue 
READ '(' lvalue ')' > Stmt  
--||-- lineNumber : 30
--||-- lineNumber : 31
Exp > IDD 
IDD > lvalue 
&&& 		IntNumber > Exp 
TO  > valfor  
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
-- open brace
--||-- lineNumber : 32
Exp > IDD 
IDD > lvalue 
&&& 		IntNumber > Exp 
TO  > valfor  
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
SUB > Aop 
&&& 		IntNumber > Exp 
Exp Aop Exp > Exp 
-- open brace
--||-- lineNumber : 33
--||-- lineNumber : 34
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
READ '(' lvalue ')' > Stmt  
--||-- lineNumber : 35
--||-- lineNumber : 36
 > SList  
Stmt ';' SList > SList  
-- close brace
'{' SList '} > Block 
FOR lvalue '=' Exp '('valfor')' Exp DO Block > Stmt  
--||-- lineNumber : 37
--||-- lineNumber : 38
 > SList  
Stmt ';' SList > SList  
-- close brace
'{' SList '} > Block 
FOR lvalue '=' Exp '('valfor')' Exp DO Block > Stmt  
--||-- lineNumber : 39
--||-- lineNumber : 40
Exp > IDD 
IDD > lvalue 
&&& 		IntNumber > Exp 
TO  > valfor  
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
-- open brace
--||-- lineNumber : 41
--||-- lineNumber : 42
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
&&& 		IntNumber > Exp 
lvalue '=' Exp > Exp 
Exp > Stmt  
--||-- lineNumber : 43
--||-- lineNumber : 44
 > SList  
Stmt ';' SList > SList  
-- close brace
'{' SList '} > Block 
FOR lvalue '=' Exp '('valfor')' Exp DO Block > Stmt  
--||-- lineNumber : 45
--||-- lineNumber : 46
Exp > IDD 
IDD > lvalue 
&&& 		IntNumber > Exp 
TO  > valfor  
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
-- open brace
--||-- lineNumber : 47
--||-- lineNumber : 48
Exp > IDD 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
IDD '[' Exp ']' > IDD 
IDD > lvalue 
lvalue > Exp 
EQUAL > Logic 
&&& 		IntNumber > Exp 
Exp Logic Exp > Exp 
'('Exp')' > Exp 
-- open brace
--||-- lineNumber : 49
--||-- lineNumber : 50
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
Exp > ExpPlus 
ExpPlus > ExpList 
ID'('ExpList')'  > Exp 
Exp > Stmt  
--||-- lineNumber : 51
--||-- lineNumber : 52
Exp > IDD 
IDD > lvalue 
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
ADD > Aop 
&&& 		IntNumber > Exp 
Exp Aop Exp > Exp 
lvalue '=' Exp > Exp 
Exp > Stmt  
--||-- lineNumber : 53
--||-- lineNumber : 54
 > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
-- close brace
'{' SList '} > Block 
IF Exp THEN Block > Stmt  
--||-- lineNumber : 55
--||-- lineNumber : 56
Exp > IDD 
IDD > lvalue 
lvalue > Exp 
'('Exp')' > Exp 
PRINT Exp > Stmt  
--||-- lineNumber : 57
--||-- lineNumber : 58
 > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
-- close brace
'{' SList '} > Block 
FOR lvalue '=' Exp '('valfor')' Exp DO Block > Stmt  
--||-- lineNumber : 59
--||-- lineNumber : 60
 > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
Stmt ';' SList > SList  
-- close brace
program ID > program 
--||-- lineNumber : 61
--||-- lineNumber : 62
--||-- lineNumber : 63
